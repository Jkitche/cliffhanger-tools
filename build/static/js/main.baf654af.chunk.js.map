{"version":3,"sources":["Progress/Progress.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","margin","spacing","root","flexGrow","Progress","props","classes","React","useState","color","setColor","progress","setProgress","anchorEl","setAnchorEl","open","Boolean","BorderLinearProgress","withStyles","bar","backgroundColor","borderRadius","lighten","height","LinearProgress","id","undefined","style","cursor","aria-describedby","className","variant","value","width","onClick","event","currentTarget","Popover","onClose","anchorOrigin","horizontal","vertical","transformOrigin","Grid","container","justify","item","TextField","onChange","target","parseInt","type","inputProps","max","min","step","padding","onChangeComplete","newColor","hex","App","numProgress","setNumProgress","progressList","i","push","Button","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAMMA,EAAYC,aAAW,SAACC,GAAD,MAAiB,CAC7CC,OAAQ,CACPA,OAAQD,EAAME,QAAQ,IAEvBC,KAAM,CACLC,SAAU,OA6GGC,EArG4B,SAC1CC,GAEA,IAAMC,EAAUT,EAAUQ,GADF,EAEEE,IAAMC,SAAS,QAFjB,mBAEjBC,EAFiB,KAEVC,EAFU,OAGQH,IAAMC,SAAS,IAHvB,mBAGjBG,EAHiB,KAGPC,EAHO,OAIQL,IAAMC,SAAS,MAJvB,mBAIjBK,EAJiB,KAIPC,EAJO,KAclBC,EAAOC,QAAQH,GAEfI,EAAuBC,YAAW,CACvCC,IAAK,CACJC,gBAAgB,GAAD,OAAKX,GACpBY,aAAc,IAEfnB,KAAM,CACLkB,gBAAiBE,YAAQ,GAAD,OAAIb,GAAS,IACrCY,aAAc,GACdE,OAAQ,KARmBL,CAU1BM,KAiBGC,EAAKV,EAAI,yBAAqBV,EAAMoB,SAAOC,EAEjD,OACC,yBACCC,MAAO,CACNC,OAAQ,UACR5B,OAAQ,SAGT,kBAACiB,EAAD,CACCY,mBAAkBJ,EAClBK,UAAWxB,EAAQN,OACnB+B,QAAQ,cACRtB,MAAM,YACNuB,MAAOrB,EACPgB,MAAO,CAAEM,MAAO,SAChBC,QArDiB,SAACC,GACpBrB,EAAYqB,EAAMC,kBAsDjB,kBAACC,EAAA,EAAD,CACCZ,GAAIA,EACJV,KAAMA,EACNF,SAAUA,EACVyB,QAvDiB,WACnBxB,EAAY,OAuDVyB,aAAc,CACbC,WAAY,SACZC,SAAU,UAEXC,gBAAiB,CAChBF,WAAY,SACZC,SAAU,QAGX,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACT,kBAACC,EAAA,EAAD,CACCC,SAlDiB,SACtBb,GAIIA,EAAMc,QAAUd,EAAMc,OAAOjB,MAChCpB,EAAYsC,SAASf,EAAMc,OAAOjB,MAAO,KAEzCpB,EAAY,IA2CRoB,MAAOrB,EACPoB,QAAQ,WACRoB,KAAK,SACLC,WAAY,CACXC,IAAK,MACLC,IAAK,IACLC,KAAM,KACN5B,MAAO,CACN6B,QAAS,QAMd,kBAAC,eAAD,CAAcC,iBArDG,SAACC,GACpBhD,EAASgD,EAASC,MAoD6BlD,MAAOA,OCvFzCmD,EAtBO,WAGrB,IAHgD,IAAD,EACTrD,IAAMC,SAAS,GADN,mBACxCqD,EADwC,KAC3BC,EAD2B,KAEzCC,EAAe,GACZC,EAAI,EAAGA,EAAIH,EAAaG,IAChCD,EAAaE,KAAK,kBAAC,EAAD,CAAUxC,GAAE,UAAKuC,MAEpC,OACC,yBAAKlC,UAAU,OACbiC,EACD,kBAACG,EAAA,EAAD,CACCzD,MAAM,UACNsB,QAAQ,YACRG,QAAS,WACR4B,EAAeD,EAAc,KAJ/B,OCFiB7C,QACW,cAA7BmD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.baf654af.chunk.js","sourcesContent":["import { Grid, Popover, TextField } from \"@material-ui/core\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport { lighten, makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { SketchPicker } from \"react-color\";\n\nconst useStyles = makeStyles((theme: any) => ({\n\tmargin: {\n\t\tmargin: theme.spacing(1),\n\t},\n\troot: {\n\t\tflexGrow: 1,\n\t},\n}));\n\ninterface IProgressProps {\n\tid: string;\n}\n\nconst Progress: React.FC<IProgressProps> = (\n\tprops: IProgressProps\n): React.ReactElement => {\n\tconst classes = useStyles(props);\n\tconst [color, setColor] = React.useState(\"#000\");\n\tconst [progress, setProgress] = React.useState(50);\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\n\tconst handleClick = (event: any): void => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleClose = (): void => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tconst open = Boolean(anchorEl);\n\n\tconst BorderLinearProgress = withStyles({\n\t\tbar: {\n\t\t\tbackgroundColor: `${color}`,\n\t\t\tborderRadius: 20,\n\t\t},\n\t\troot: {\n\t\t\tbackgroundColor: lighten(`${color}`, 0.5),\n\t\t\tborderRadius: 20,\n\t\t\theight: 10,\n\t\t},\n\t})(LinearProgress);\n\n\tconst updateProgress = (\n\t\tevent: React.ChangeEvent<\n\t\t\tHTMLTextAreaElement | HTMLInputElement | HTMLSelectElement\n\t\t>\n\t): void => {\n\t\tif (event.target && event.target.value) {\n\t\t\tsetProgress(parseInt(event.target.value, 10));\n\t\t} else {\n\t\t\tsetProgress(0);\n\t\t}\n\t};\n\n\tconst updateColor = (newColor: any): void => {\n\t\tsetColor(newColor.hex);\n\t};\n\tconst id = open ? `simple-popover-${props.id}` : undefined;\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tcursor: \"pointer\",\n\t\t\t\tmargin: \"30px\",\n\t\t\t}}\n\t\t>\n\t\t\t<BorderLinearProgress\n\t\t\t\taria-describedby={id}\n\t\t\t\tclassName={classes.margin}\n\t\t\t\tvariant=\"determinate\"\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tvalue={progress}\n\t\t\t\tstyle={{ width: \"500px\" }}\n\t\t\t\tonClick={handleClick}\n\t\t\t/>\n\t\t\t<Popover\n\t\t\t\tid={id}\n\t\t\t\topen={open}\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tonClose={handleClose}\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\thorizontal: \"center\",\n\t\t\t\t\tvertical: \"bottom\",\n\t\t\t\t}}\n\t\t\t\ttransformOrigin={{\n\t\t\t\t\thorizontal: \"center\",\n\t\t\t\t\tvertical: \"top\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Grid container justify=\"center\">\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tonChange={updateProgress}\n\t\t\t\t\t\t\tvalue={progress}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\tmax: \"100\",\n\t\t\t\t\t\t\t\tmin: \"0\",\n\t\t\t\t\t\t\t\tstep: \".1\",\n\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\tpadding: 5,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t\t<SketchPicker onChangeComplete={updateColor} color={color} />\n\t\t\t</Popover>\n\t\t</div>\n\t);\n};\n\nexport default Progress;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Progress from \"./Progress/Progress\";\n\nconst App: React.FC = (): React.ReactElement => {\n\tconst [numProgress, setNumProgress] = React.useState(3);\n\tconst progressList = [];\n\tfor (let i = 0; i < numProgress; i++) {\n\t\tprogressList.push(<Progress id={`${i}`} />);\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{progressList}\n\t\t\t<Button\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tonClick={(): void => {\n\t\t\t\t\tsetNumProgress(numProgress + 1);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t+\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}